rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {



    // --- User Profiles (Top-level 'users' collection) ---
    match /users/{userId} {
      // Allow users to read and update their own profiles
      allow read: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;

      // Admins can read and update any user profile (needed for role checking)
      allow read, update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    // --- Public Data for Applications ---
    match /artifacts/{appId}/public/data {

      // --- Orders Collection ---
      match /orders/{orderId} {
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        allow create: if request.auth != null;
        // Allow update for the order owner to update paymentStatus
        allow update: if request.auth != null && (
          request.auth.uid == resource.data.userId &&
          request.resource.data.paymentStatus == 'paid' &&
          resource.data.paymentStatus == 'requested' &&
          // Ensure only 'paymentStatus' and 'updatedAt' fields are being modified by the customer
          request.resource.data.keys().hasOnly(['paymentStatus', 'updatedAt'])
        );
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }

      // --- Store Orders Collection ---
      match /store-orders/{orderId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }

      // --- Product Stock Collection ---
      match /product-stock/{productId} {
        allow read: if true; // Anyone can read stock (public info)
        allow create: if request.auth != null && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']); // Only admins can create new product stock entries
        allow update: if request.auth != null && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']); // Only admins can update stock
        allow delete: if false; // Stock should probably not be deleted by anyone
      }

      // --- Order Conversations Subcollection ---
      match /orders/{orderId}/conversation/{messageId} {
        // Allow read if:
        // 1. The request is authenticated AND
        // 2. The user is the original creator of the order
        allow read: if request.auth != null && 
          get(/databases/$(database)/documents/artifacts/$(appId)/public/data/orders/$(orderId)).data.userId == request.auth.uid;
        // Allow create if:
        // 1. The request is authenticated AND
        // 2. The senderId matches the authenticated user's UID AND
        // 3. The user is the original creator of the order
        allow create: if request.auth != null && 
          request.resource.data.senderId == request.auth.uid &&
          get(/databases/$(database)/documents/artifacts/$(appId)/public/data/orders/$(orderId)).data.userId == request.auth.uid;
      }

      // --- Notifications Collection ---
      match /notifications/{notificationId} {
        // Allow read if:
        // 1. The request is authenticated AND
        // 2. The user is reading their own notifications (userId == request.auth.uid)
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        
        // Allow create if:
        // 1. The request is authenticated AND
        // 2. The notification is being created for the authenticated user OR
        // 3. The notification is being created for support purposes (support notifications) OR
        // 4. The notification is being created for store purposes (store notifications)
        allow create: if request.auth != null && (
          request.resource.data.userId == request.auth.uid ||
          request.resource.data.type == "support" ||
          request.resource.data.type == "store_payment" ||
          request.resource.data.type == "store_order" ||
          request.resource.data.type == "store_shipping" ||
          request.resource.data.type == "store_delivery"
        );
        
        // Allow update if:
        // 1. The request is authenticated AND
        // 2. The user is updating their own notification (userId == request.auth.uid)
        allow update: if request.auth != null && resource.data.userId == request.auth.uid;
        
        // Allow delete if:
        // 1. The request is authenticated AND
        // 2. The user is deleting their own notification (userId == request.auth.uid)
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }

      // --- Support Chats Collection ---
      match /supportChats/{chatId} {
        // Allow read if:
        // 1. The request is authenticated AND
        // 2. The user is the customer of this chat OR
        // 3. The user is an admin/team member (simplified - allow all authenticated users for now)
        allow read: if request.auth != null;
        
        // Allow create if:
        // 1. The request is authenticated AND
        // 2. The user is creating a chat for themselves
        allow create: if request.auth != null && request.resource.data.customerUid == request.auth.uid;
        
        // Allow update if:
        // 1. The request is authenticated AND
        // 2. The user is the customer of this chat OR
        // 3. The user is an admin/team member (simplified - allow all authenticated users for now)
        allow update: if request.auth != null;
        
        // Allow delete if:
        // 1. The request is authenticated AND
        // 2. The user is the customer of this chat OR
        // 3. The user is an admin/team member (simplified - allow all authenticated users for now)
        allow delete: if request.auth != null;
      }

      // --- Support Chat Messages Subcollection ---
      match /supportChats/{chatId}/messages/{messageId} {
        // Allow read for any authenticated user (simplified for now)
        allow read: if request.auth != null;
        
        // Allow create if:
        // 1. The request is authenticated AND
        // 2. The senderId matches the authenticated user
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
        
        // Allow update if:
        // 1. The request is authenticated AND
        // 2. The senderId matches the authenticated user OR
        // 3. The user is updating only the isRead field (for admin marking messages as read)
        allow update: if request.auth != null && (
          resource.data.senderId == request.auth.uid ||
          (request.resource.data.keys().hasAny(['isRead']) && request.resource.data.isRead == true)
        );
        
        // Allow delete if:
        // 1. The request is authenticated AND
        // 2. The senderId matches the authenticated user
        allow delete: if request.auth != null && resource.data.senderId == request.auth.uid;
      }

      // --- Teams Collection (for general team management) ---
      match /teams/{teamId} {
        // Allow read for authenticated users
        allow read: if request.auth != null;
        
        // Allow create for authenticated users
        allow create: if request.auth != null;
        
        // Allow update for authenticated users (simplified for team joining)
        allow update: if request.auth != null;
        
        // Allow delete for team admins
        allow delete: if request.auth != null && resource.data.adminId == request.auth.uid;
      }

      // --- Team Messages Subcollection (for general team chat) ---
      match /teams/{teamId}/messages/{messageId} {
        // Allow read for team members
        allow read: if request.auth != null && 
          get(/databases/$(database)/documents/artifacts/$(appId)/public/data/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
        
        // Allow create for team members
        allow create: if request.auth != null && 
          request.resource.data.senderId == request.auth.uid &&
          get(/databases/$(database)/documents/artifacts/$(appId)/public/data/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }
    }
  }
}